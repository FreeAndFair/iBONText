/**
 */
package org.emftext.language.BON.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.emftext.language.BON.util.BONAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * @generated
 */
public class BONItemProviderAdapterFactory extends BONAdapterFactory implements
		ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement
	 * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public BONItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.emftext.language.BON.System_chart} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected System_chartItemProvider system_chartItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.System_chart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystem_chartAdapter() {
		if (system_chartItemProvider == null) {
			system_chartItemProvider = new System_chartItemProvider(this);
		}

		return system_chartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.BON.Cluster} instances.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	protected ClusterItemProvider clusterItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Cluster}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClusterAdapter() {
		if (clusterItemProvider == null) {
			clusterItemProvider = new ClusterItemProvider(this);
		}

		return clusterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.emftext.language.BON.Cluster_chart} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Cluster_chartItemProvider cluster_chartItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Cluster_chart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCluster_chartAdapter() {
		if (cluster_chartItemProvider == null) {
			cluster_chartItemProvider = new Cluster_chartItemProvider(this);
		}

		return cluster_chartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.emftext.language.BON.Class_chart} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Class_chartItemProvider class_chartItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Class_chart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClass_chartAdapter() {
		if (class_chartItemProvider == null) {
			class_chartItemProvider = new Class_chartItemProvider(this);
		}

		return class_chartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.BON.Indexing} instances.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	protected IndexingItemProvider indexingItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Indexing}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndexingAdapter() {
		if (indexingItemProvider == null) {
			indexingItemProvider = new IndexingItemProvider(this);
		}

		return indexingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.BON.ClassBON} instances.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassBONItemProvider classBONItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.ClassBON}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassBONAdapter() {
		if (classBONItemProvider == null) {
			classBONItemProvider = new ClassBONItemProvider(this);
		}

		return classBONItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.emftext.language.BON.Informal_charts} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Informal_chartsItemProvider informal_chartsItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Informal_charts}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInformal_chartsAdapter() {
		if (informal_chartsItemProvider == null) {
			informal_chartsItemProvider = new Informal_chartsItemProvider(this);
		}

		return informal_chartsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.BON.Query} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryItemProvider queryItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Query}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryAdapter() {
		if (queryItemProvider == null) {
			queryItemProvider = new QueryItemProvider(this);
		}

		return queryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.BON.Command} instances.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandItemProvider commandItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Command}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandAdapter() {
		if (commandItemProvider == null) {
			commandItemProvider = new CommandItemProvider(this);
		}

		return commandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.emftext.language.BON.Constraint} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Constraint}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.emftext.language.BON.Explanation} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ExplanationItemProvider explanationItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Explanation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExplanationAdapter() {
		if (explanationItemProvider == null) {
			explanationItemProvider = new ExplanationItemProvider(this);
		}

		return explanationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.emftext.language.BON.Index_Identifier} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Index_IdentifierItemProvider index_IdentifierItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Index_Identifier}.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndex_IdentifierAdapter() {
		if (index_IdentifierItemProvider == null) {
			index_IdentifierItemProvider = new Index_IdentifierItemProvider(
					this);
		}

		return index_IdentifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.BON.Part} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartItemProvider partItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Part}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createPartAdapter() {
		if (partItemProvider == null) {
			partItemProvider = new PartItemProvider(this);
		}

		return partItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.BON.Commands} instances.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandsItemProvider commandsItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Commands}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandsAdapter() {
		if (commandsItemProvider == null) {
			commandsItemProvider = new CommandsItemProvider(this);
		}

		return commandsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.emftext.language.BON.Constraints} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ConstraintsItemProvider constraintsItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Constraints}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintsAdapter() {
		if (constraintsItemProvider == null) {
			constraintsItemProvider = new ConstraintsItemProvider(this);
		}

		return constraintsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.BON.Queries} instances.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	protected QueriesItemProvider queriesItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Queries}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueriesAdapter() {
		if (queriesItemProvider == null) {
			queriesItemProvider = new QueriesItemProvider(this);
		}

		return queriesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.emftext.language.BON.Event_chart} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Event_chartItemProvider event_chartItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Event_chart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvent_chartAdapter() {
		if (event_chartItemProvider == null) {
			event_chartItemProvider = new Event_chartItemProvider(this);
		}

		return event_chartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.emftext.language.BON.Scenario_chart} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Scenario_chartItemProvider scenario_chartItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Scenario_chart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenario_chartAdapter() {
		if (scenario_chartItemProvider == null) {
			scenario_chartItemProvider = new Scenario_chartItemProvider(this);
		}

		return scenario_chartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.emftext.language.BON.Creation_chart} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Creation_chartItemProvider creation_chartItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Creation_chart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreation_chartAdapter() {
		if (creation_chartItemProvider == null) {
			creation_chartItemProvider = new Creation_chartItemProvider(this);
		}

		return creation_chartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.BON.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Event}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.BON.Scenario} instances.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioItemProvider scenarioItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Scenario}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioAdapter() {
		if (scenarioItemProvider == null) {
			scenarioItemProvider = new ScenarioItemProvider(this);
		}

		return scenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.emftext.language.BON.Creation} instances.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	protected CreationItemProvider creationItemProvider;

	/**
	 * This creates an adapter for a {@link org.emftext.language.BON.Creation}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreationAdapter() {
		if (creationItemProvider == null) {
			creationItemProvider = new CreationItemProvider(this);
		}

		return creationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>)
					|| (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to
	 * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void dispose() {
		if (system_chartItemProvider != null)
			system_chartItemProvider.dispose();
		if (clusterItemProvider != null)
			clusterItemProvider.dispose();
		if (cluster_chartItemProvider != null)
			cluster_chartItemProvider.dispose();
		if (class_chartItemProvider != null)
			class_chartItemProvider.dispose();
		if (indexingItemProvider != null)
			indexingItemProvider.dispose();
		if (classBONItemProvider != null)
			classBONItemProvider.dispose();
		if (informal_chartsItemProvider != null)
			informal_chartsItemProvider.dispose();
		if (queryItemProvider != null)
			queryItemProvider.dispose();
		if (commandItemProvider != null)
			commandItemProvider.dispose();
		if (constraintItemProvider != null)
			constraintItemProvider.dispose();
		if (explanationItemProvider != null)
			explanationItemProvider.dispose();
		if (index_IdentifierItemProvider != null)
			index_IdentifierItemProvider.dispose();
		if (partItemProvider != null)
			partItemProvider.dispose();
		if (commandsItemProvider != null)
			commandsItemProvider.dispose();
		if (constraintsItemProvider != null)
			constraintsItemProvider.dispose();
		if (queriesItemProvider != null)
			queriesItemProvider.dispose();
		if (event_chartItemProvider != null)
			event_chartItemProvider.dispose();
		if (scenario_chartItemProvider != null)
			scenario_chartItemProvider.dispose();
		if (creation_chartItemProvider != null)
			creation_chartItemProvider.dispose();
		if (eventItemProvider != null)
			eventItemProvider.dispose();
		if (scenarioItemProvider != null)
			scenarioItemProvider.dispose();
		if (creationItemProvider != null)
			creationItemProvider.dispose();
	}

}
